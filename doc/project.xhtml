<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><title /><meta name="generator" content="StarOffice/OpenOffice.org XSLT (http://xml.openoffice.org/sx2ml)" /><meta name="author" content="pp" /><meta name="created" content="2007-09-04T18:43:06" /><meta name="changedby" content="pp" /><meta name="changed" content="2007-09-09T12:47:24" /><base href="." /><style type="text/css">
	@page { size: 8.5inch 11inch; margin-top: 0.7874inch; margin-bottom: 0.7874inch; margin-left: 0.7874inch; margin-right: 0.7874inch }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; }
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { padding:0; }
	* { margin:0; }
	*.Graphics { font-size:12pt; vertical-align:top; text-align:center; }
	*.Caption { font-family:Times; font-size:12pt; margin-top:0.0835in; margin-bottom:0.0835in; font-style:italic; }
	*.Contents2 { font-family:Times; font-size:12pt; margin-left:0.1965in; margin-right:0in; text-indent:0inch; }
	*.Contents3 { font-family:Times; font-size:12pt; margin-left:0.3929in; margin-right:0in; text-indent:0inch; }
	*.Contents4 { font-family:Times; font-size:12pt; margin-left:0.5898in; margin-right:0in; text-indent:0inch; }
	*.ContentsHeading { font-family:Helvetica; font-size:16pt; margin-top:0.1665in; margin-bottom:0.0835in; margin-left:0in; margin-right:0in; text-indent:0inch; font-weight:bold; }
	*.Heading { font-family:Helvetica; font-size:14pt; margin-top:0.1665in; margin-bottom:0.0835in; }
	*.Heading1 { font-family:Helvetica; font-size:115%; margin-top:0.1665in; margin-bottom:0.0835in; font-weight:bold; }
	*.Heading2 { font-family:'DejaVu Sans'; font-size:18pt; margin-top:0.1665in; margin-bottom:0.0835in; font-weight:bold; }
	*.Heading3 { font-family:'DejaVu Sans'; font-size:14pt; margin-top:0.1665in; margin-bottom:0.0835in; font-weight:bold; }
	*.Heading4 { font-family:Helvetica; font-size:85%; margin-top:0.1665in; margin-bottom:0.0835in; font-style:italic; font-weight:bold; }
	*.Index { font-family:Times; font-size:12pt; }
	*.List { font-family:Times; font-size:12pt; margin-top:0in; margin-bottom:0.0835in; }
	*.P1 { font-family:Times; font-size:12pt; margin-top:0in; margin-bottom:0.1965in; }
	*.P2 { font-family:'DejaVu Sans Mono'; font-size:10pt; margin-top:0in; margin-bottom:0.1965in; }
	*.P3 { font-family:Times; font-size:12pt; margin-top:0in; margin-bottom:0.1965in; }
	*.P4 { font-family:Times; font-size:12pt; margin-left:0.3929in; margin-right:0in; text-indent:0inch; }
	*.P5 { font-family:'DejaVu Sans Mono'; font-size:10pt; margin-top:0in; margin-bottom:0.1965in; }
	*.PreformattedText { font-family:'DejaVu Sans Mono'; font-size:10pt; margin-top:0in; margin-bottom:0in; }
	*.Standard { font-family:Times; font-size:12pt; }
	*.Textbody { font-family:Times; font-size:12pt; margin-top:0in; margin-bottom:0.0835in; }
	*.Sect1 { background-color:transparent; }
	*.Sect2 { }
	*.Internetlink { color:#000080; text-decoration:underline; }
	*.NumberingSymbols { }
	*.T1 { font-weight:bold; }
	*.T2 { font-weight:bold; }
	*.T3 { font-weight:normal; }
	*.T4 { vertical-align:sup; }
	</style></head><body dir="ltr"><p class="Heading">alsaseq – ALSA sequencer bindings for Python </p><p class="Textbody"> </p><p class="Textbody"><span class="T1">alsaseq</span> is a Python module that allows to interact with ALSA sequencer clients.   It can create an ALSA client, connect to other clients, send and receive ALSA events immediately or at a scheduled time using a sequencer queue.  It provides a subset of the ALSA sequencer capabilities in a simplified model.  It is implemented in C language and licensed under the Gnu GPL license version 2 or later.  Current version is 0.1, first public release made on September 9<span class="T4">th</span>, 2007.</p><p class="Textbody"> </p><p class="ContentsHeading">Contents </p><table border="0" cellspacing="0" cellpadding="0" class="P4"><colgroup><col style="width: 6.5319in" /></colgroup><tr><td>Installation</td></tr></table><table border="0" cellspacing="0" cellpadding="0" class="P4"><colgroup><col style="width: 6.5319in" /></colgroup><tr><td>Interactive use</td></tr></table><table border="0" cellspacing="0" cellpadding="0" class="P4"><colgroup><col style="width: 6.5319in" /></colgroup><tr><td>Examples</td></tr></table><p class="Textbody"> </p><h3 class="Heading3"><a name="Installation" />Installation</h3><p class="Textbody">Download the <span class="T1">alsaseq.tar.gz</span> file into some directory:</p><p class="PreformattedText">$ wget <a href="http://pp.com.mx/python/alsaseq.tar.gz">http://pp.com.mx/python/alsaseq/alsaseq-0.1.tar.gz</a></p><p class="PreformattedText"> </p><p class="Textbody">Extract the contents: </p><p class="PreformattedText">$ tar xf alsaseq-0.1.tar.gz </p><p class="PreformattedText"> </p><p class="Textbody">Enter the folder alsaseq that was created: </p><p class="PreformattedText">$ cd alsaseq-0.1 </p><p class="PreformattedText"> </p><p class="Textbody">Compile the module: </p><p class="PreformattedText">$ gcc -shared -I /usr/include/python2.5 -lasound -o alsaseq.so alsaseq.c. </p><p class="PreformattedText"> </p><p class="Textbody">You need the Python and ALSA development header files (install <span class="T2">python-dev</span> and <span class="T2">libasound2-dev</span><span class="T3"> for Ubuntu; </span><span class="T2">libpython2.4-devel</span><span class="T3"> and </span><span class="T2">libalsa2-devel</span><span class="T3"> for Mandriva)</span> and the GNU compiler.</p><p class="Textbody">Copy the <span class="T2">alsaseq.so</span> file to /usr/local/bin, and <span class="T2">alsamidi.py</span> to /usr/local/lib/python2.5/site-packages.</p><h3 class="Heading3"><a name="Interactive_use" />Interactive use</h3><p class="Textbody">Create an ALSA sequencer client with one input port and one output port, no queue: </p><p class="PreformattedText">&gt;&gt;&gt; import alsaseq </p><p class="P2">&gt;&gt;&gt; alsaseq.client( 'Simple', 1, 1, False ) </p><p class="Textbody">Port 0 is input, port 1 is output.  Connect ALSA client 129 (could be a musical keyboard or Virtual Keyboard)  to the input port, and connect output port to ALSA client 130 (a MIDI to sound converter like Timidity):</p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.connectfrom( 0, 129, 0 ) </p><p class="P2">&gt;&gt;&gt; alsaseq.connectto( 1, 130, 0 ) </p><p class="P1">Check if there are events in the input port due to notes played in the MIDI keyboard: </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.inputpending() </p><p class="P2">2 </p><p class="Textbody">Read and display an ALSA event: </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.input() </p><p class="PreformattedText">(6, 1, 0, 253, (0, 0), (0, 0), (0, 0), (0, 60, 127, 0, 0)) </p><p class="PreformattedText"> </p><p class="Textbody">ALSA events are tuples with 8 elements:  (type, flags, tag, queue, time stamp, source, destination, data).  In a client without queue, received events have no time information and are asigned dummy queue number 253.</p><p class="Textbody">Save a received event to send it for immediate processing: </p><p class="PreformattedText">&gt;&gt;&gt; event = alsaseq.input() </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.output( event ) </p><p class="PreformattedText"> </p><p class="P1">In a client with createqueue = True, you first start the queue in order to schedule events for execution at a certain time: </p><p class="P1">In order to time stamp received events and to schedule output events for execution at a certain time, specify the client with createqueue = True, and start the queue : </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.client( 'Simple', 1, 1, True ) </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.start() </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.output( (6, 1, 0, 1, (5, 0), (0, 0), (0, 0), (0, 60, 127, 0, 100)) ) </p><p class="PreformattedText"> </p><p class="Textbody">The above output() schedules a C note at 5 seconds after the start() command, for a duration of  100ms.</p><p class="PreformattedText"> </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.input() </p><p class="PreformattedText">(6, 1, 0, 1, ( 12, 125433), (0, 0), (0, 0), (0, 62, 120, 0, 100)) ) </p><p class="PreformattedText"> </p><p class="Textbody">The above ALSA event was received in the input port 12 seconds and 123,433 millionths after the start() command.  You can view the status ( running, stopped ) of que queue, and the current time, and stop it:</p><p class="PreformattedText"> </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.status() </p><p class="PreformattedText">( 1, ( 20, 546234 ) ) </p><p class="PreformattedText">&gt;&gt;&gt; alsaseq.stop() </p><p class="PreformattedText"> </p><p class="PreformattedText">The status() shows the queue as running at 20 seconds, 546,234 millionths. </p><p class="PreformattedText"> </p><p class="P1">ALSA events for common MIDI events can be created using helper functions in alsamidi module: </p><p class="PreformattedText">&gt;&gt;&gt; alsamidi.noteevent( 1, 60, 120, 5000, 10 )&#13; </p><p class="PreformattedText">(5, 1, 0, 0, (5, 0), (0, 0), (0, 0), (1, 60, 120, 0, 10))&#13; </p><p class="PreformattedText"> </p><p class="Textbody">See help( alsamidi ) or pydoc( alsamidi ) for more information. </p><p class="Textbody"> </p><h3 class="Heading3"><a name="Examples" />Examples</h3><p class="Textbody">In these example scripts it is assumed that client 129 is a MIDI keyboard, clients 130 and 131 are MIDI sound generation modules. </p><h4 class="Heading4"><a name="MIDI_through" />MIDI through</h4><p class="PreformattedText">import alsaseq </p><p class="PreformattedText">alsaseq.client( 'MIDI through', 1, 1, False ) </p><p class="PreformattedText">alsaseq.connectfrom( 1, 129, 0 ) </p><p class="PreformattedText">alsaseq.connectto( 0, 130, 0 ) </p><p class="PreformattedText">while 1: </p><p class="PreformattedText">  if alsaseq.inputpending():</p><p class="PreformattedText">     ev = alsaseq.input()</p><p class="PreformattedText">     alsaseq.output( ev )</p><p class="PreformattedText"> </p><p class="Textbody">Press control + c to interrupt the loop. </p><h4 class="Heading4"><a name="MIDI_router" />MIDI router</h4><p class="PreformattedText">import alsaseq </p><p class="PreformattedText">alsaseq.client( 'Router', 1, 2, False ) </p><p class="PreformattedText">alsaseq.connectfrom( 1, 129, 0 ) </p><p class="PreformattedText">alsaseq.connectto( 0, 130, 0 ) </p><p class="PreformattedText">alsaseq.connectto( 0, 131, 0 ) </p><p class="PreformattedText"> </p><p class="PreformattedText">while 1: </p><p class="PreformattedText">  if alsaseq.inputpending():</p><p class="PreformattedText">     ev = list( alsaseq.input() )</p><p class="PreformattedText">     if ev[7][1] &gt; 60:  # if note is above C split limit,</p><p class="PreformattedText">         ev[5][0] = 2,  # use second output port</p><p class="PreformattedText">     alsaseq.output( ev )</p><p class="PreformattedText"> </p><h4 class="Heading4"><a name="Recorder" />Recorder</h4><p class="PreformattedText">import alsaseq, pickle </p><p class="PreformattedText">alsaseq.client( 'Recorder', 1, 0, True ) </p><p class="PreformattedText">alsaseq.connectfrom( 1, 129, 0 ) </p><p class="PreformattedText">alsaseq.start() </p><p class="PreformattedText">events = []  </p><p class="PreformattedText">while 1: </p><p class="PreformattedText">    if alsaseq.inputpending():</p><p class="PreformattedText">        event = alsaseq.input()</p><p class="PreformattedText">        if event[7][1] == 56: # if note is central G#</p><p class="PreformattedText">            break             # quit recording</p><p class="PreformattedText">        events.append( ev )</p><p class="PreformattedText"> </p><p class="PreformattedText"> </p><p class="PreformattedText">pickle.dump( events, open( 'events.seq', 'w' ) ) </p><h4 class="Heading4"><a name="Player" />Player</h4><p class="PreformattedText">import alsaseq, pickle </p><p class="PreformattedText">events = pickle.load( open( ruta ) ) </p><p class="PreformattedText"> </p><p class="PreformattedText">alsaseq.client( 'Player', 0, 1, True ) </p><p class="PreformattedText">alsaseq.connectto( 0, 130, 0 ) </p><p class="PreformattedText">alsaseq.start()  </p><p class="PreformattedText"> </p><p class="PreformattedText">for event in events:  </p><p class="PreformattedText">    alsaseq.output( event ) </p><p class="PreformattedText"> </p></body></html>